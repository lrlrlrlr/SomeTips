#!/usr/bin/env python3
#coding:utf-8


from retrying import retry
import random

@retry
def something_unreliable():
    if random.randint(0,5)!=0:
        print('error')
        raise 'error!'
    else:
        return 'well done!'
        
        
if __name__ =='main':
    something_unreliable()
    
    
    
    
'''
http://www.jb51.net/article/112954.htm
retry还可以接受一些参数，这个从源码中Retrying类的初始化函数可以看到可选的参数：
stop_max_attempt_number：用来设定最大的尝试次数，超过该次数就停止重试
 stop_max_delay：比如设置成10000，那么从被装饰的函数开始执行的时间点开始，到函数成功运行结束或者失败报错中止的时间点，只要这段时间超过10秒，函数就不会再执行了
wait_fixed：设置在两次retrying之间的停留时间
wait_random_min和wait_random_max：用随机的方式产生两次retrying之间的停留时间
wait_exponential_multiplier和wait_exponential_max：以指数的形式产生两次retrying之间的停留时间，产生的值为2^previous_attempt_number * wait_exponential_multiplier，previous_attempt_number是前面已经retry的次数，如果产生的这个值超过了wait_exponential_max的大小，那么之后两个retrying之间的停留值都为wait_exponential_max。这个设计迎合了exponential backoff算法，可以减轻阻塞的情况。
我们可以指定要在出现哪些异常的时候再去retry，这个要用retry_on_exception传入一个函数对象：
def retry_if_io_error(exception):
 return isinstance(exception, IOError)
 
@retry(retry_on_exception=retry_if_io_error)
def read_a_file():
 with open("file", "r") as f:
  return f.read()
在执行read_a_file函数的过程中，如果报出异常，那么这个异常会以形参exception传入retry_if_io_error函数中，如果exception是IOError那么就进行retry，如果不是就停止运行并抛出异常。
我们还可以指定要在得到哪些结果的时候去retry，这个要用retry_on_result传入一个函数对象：
def retry_if_result_none(result):
 return result is None
 
@retry(retry_on_result=retry_if_result_none)
def get_result():
 return None
在执行get_result成功后，会将函数的返回值通过形参result的形式传入retry_if_result_none函数中，如果返回值是None那么就进行retry，否则就结束并返回函数值。
'''
